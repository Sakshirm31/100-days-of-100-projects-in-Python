### main.py ###
  
from turtle import Screen
import time
from snake import Snake
from food import Food
from scoreboard import Scoreboard

screen = Screen()
screen.setup(600, 600)
screen.bgcolor("black")
screen.title("My Snake Game")
screen.tracer(0)

snake = Snake()
food=Food()
scoreboard=Scoreboard()

screen.listen()
screen.onkey(snake.up, "Up")
screen.onkey(snake.down, "Down")
screen.onkey(snake.left, "Left")
screen.onkey(snake.right, "Right")

is_game_on = True
while is_game_on:
    screen.update()
    time.sleep(0.1)

    snake.move()

    if snake.head.distance(food)<15:
        food.refresh()
        snake.extend()
        scoreboard.score_increase()

    if snake.head.xcor()>290 or snake.head.ycor()>290 or snake.head.xcor()<-290 or snake.head.ycor()<-290:
        scoreboard.restart()
        snake.reset()

    for segment in snake.segments[1:]:
        if snake.head.distance(segment)<10:
            scoreboard.restart()
            snake.reset()

screen.exitonclick()


###snake.py###
  
from turtle import Turtle, Screen

POSITION_SEGMENT = [(0, 0), (-20, 0), (-40, 0)]
MOVE_DISTANCE = 20
UP=90
DOWN=270
LEFT=180
RIGHT=0

class Snake:

    def __init__(self):
        self.segments = []
        self.create_snake()
        self.head= self.segments[0]

    def create_snake(self):
        for position in POSITION_SEGMENT:
            self.add_segment(position)

    def add_segment(self,position):
        new_segment = Turtle(shape='square')
        new_segment.color("white")
        new_segment.penup()
        new_segment.goto(position)
        self.segments.append(new_segment)


    def reset(self):
        for seg in self.segments:
            seg.goto(1000,1000)
        self.segments.clear()
        self.create_snake()
        self.head = self.segments[0]

    def extend(self):
        self.add_segment(self.segments[-1].position())
    def move(self):
        for seg_num in range(len(self.segments) - 1, 0, -1):
            new_x = self.segments[seg_num - 1].xcor()
            new_y = self.segments[seg_num - 1].ycor()
            self.segments[seg_num].goto(new_x, new_y)
        self.segments[0].forward(MOVE_DISTANCE)

    def up(self):
        if self.head.heading()!=DOWN:
            self.head.setheading(UP)

    def down(self):
        if self.head.heading() != UP:
            self.head.setheading(DOWN)

    def left(self):
        if self.head.heading() != RIGHT:
            self.head.setheading(LEFT)

    def right(self):
        if self.head.heading() != LEFT:
            self.head.setheading(RIGHT)




###food.py###
              
from turtle import Turtle
import random

class Food(Turtle):

    def __init__(self):
        super().__init__()
        self.color("red")
        self.shape("circle")
        self.shapesize(stretch_len=0.5,stretch_wid=0.5)
        self.penup()
        self.speed("fastest")
        self.refresh()


    def refresh(self):
        random_x = random.randint(-280, 280)
        random_y = random.randint(-280, 280)
        self.goto(random_x, random_y)




###scoreboard###

from turtle import Turtle
ALIGNMENT='center'
FONT=('Courier', 15, 'normal')
class Scoreboard(Turtle):
     def __init__(self):
         super().__init__()
         self.score=0
         with open("/Users/Sakshi Mundada/Desktop/data.txt") as file:
            self.highscore=int(file.read())
         self.color("white")
         self.penup()
         self.goto(0,273)
         self.hideturtle()
         self.update_scoreboard()

     def update_scoreboard(self):
        self.clear()
        self.write(f"Score={self.score} Highest Score:{self.highscore}", align=ALIGNMENT, font=FONT)

     def restart(self):
         if self.score>self.highscore:
             self.highscore=self.score
             with open("/Users/Sakshi Mundada/Desktop/data.txt", mode="w") as file:
                 file.write(f'{self.highscore}')
         self.score=0
         self.update_scoreboard()

     def score_increase(self):
         self.score+=1
         self.update_scoreboard()
